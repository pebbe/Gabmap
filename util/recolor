#!/usr/bin/env python2

"""
--documentation--
"""

__author__ = "Peter Kleiweg"
__version__ = "0.1"
__date__ = "2010/06/01"

#| imports

import cgitb; cgitb.enable(format="text")

import math, sys

#| globals

axEqual = False
fromMDS = False

#| functions

def rgb2hsv(r, g, b):
    mx = max(r, g, b)
    mn = min(r, g, b)
    d = mx - mn
    try:
        if r >= g and r >= b:
            h = 60.0 * (g - b) / d
        elif g >= b:
            h = 60.0 * (2.0 + (b - r) / d)
        else:
            h = 60.0 * (4.0 + (r - g) / d)
    except:
        h = 0
    while h >= 360.0:
        h = h - 360.0
    while h < 0.0:
        h = h + 360.0
    s = d / mx
    v = mx
    return (h, s, v)

def hsv2rgb(h, s, v):
    if s == 0:
        return (v, v, v)
    hi = int(h / 60.0)
    f = h / 60.0 - hi
    p = v * (1.0 - s)
    q = v * (1.0 - f * s)
    t = v * (1.0 - (1.0 - f) * s)
    if hi == 0:
        return (v, t, p)
    if hi == 1:
        return (q, v, p)
    if hi == 2:
        return (p, v, t)
    if hi == 3:
        return (p, q, v)
    if hi == 4:
        return (t, p, v)
    return (v, p, q)

def isNaN(f):
    return str(f) == 'nan'

def recolor(r, g, b):
    if dim1:
        r = math.sqrt((r - rmin) / (rmax - rmin))
    else:
        r = 181 / 255.0
    if dim2:
        g = math.sqrt((g - gmin) / (gmax - gmin))
    else:
        g = 181 / 255.0
    if dim3:
        b = math.sqrt((b - bmin) / (bmax - bmin))
    else:
        b = 181 / 255.0
    h, s, v = rgb2hsv(r, g, b)
    r, g, b = hsv2rgb(h, s, v * v)
    return (r, g, b)

#| main

colors = []

while sys.argv[1][0] == '-':
    if sys.argv[1] == '-e':
        axEqual = True
    elif sys.argv[1] == '-m':
        fromMDS = True
    sys.argv.pop(1)

dim1 = dim2 = dim3 = True
fp = open(sys.argv[1], 'rt')
state = 0
for line in fp:
    line = line.strip()
    if not line or line[0] == '#':
        continue
    if state == 0:
        n = int(line)
        assert n == 3
        state = 1
    elif state == 1:
        lbl = line
        state = 2
    elif state == 2:
        r = float(line)
        if isNaN(r):
            dim1 = False
        state = 3
    elif state == 3:
        g = float(line)
        if isNaN(g):
            dim2 = False
        state = 4
    elif state == 4:
        b = float(line)
        if isNaN(b):
            dim3 = False
        colors.append((lbl, r, g, b))
        state = 1
fp.close()

if fromMDS:
    if len(colors) < 4:
        dim3 = False
    if len(colors) < 3:
        dim2 = False
    if len(colors) < 2:
        dim1 = False

rmin = rmax = colors[0][1]
gmin = gmax = colors[0][2]
bmin = bmax = colors[0][3]
for lbl, r, g, b in colors[1:]:
    if dim1:
        if r > rmax: rmax = r
        if r < rmin: rmin = r
    if dim2:
        if g > gmax: gmax = g
        if g < gmin: gmin = g
    if dim3:
        if b > bmax: bmax = b
        if b < bmin: bmin = b

if rmin == rmax:
    dim1 = False
if gmin == gmax:
    dim2 = False
if bmin == bmax:
    dim3 = False

if axEqual:
    ranges = []
    if dim1:
        rrange = rmax - rmin
        ranges.append(rrange)
    if dim2:
        grange = gmax - gmin
        ranges.append(grange)
    if dim3:
        ranges.append(brange)
        brange = bmax - bmin
    rgbrange = max(ranges)
    if dim1:
        rmin -= (rgbrange - rrange) / 2.0
        rmax += (rgbrange - rrange) / 2.0
    if dim2:
        gmin -= (rgbrange - grange) / 2.0
        gmax += (rgbrange - grange) / 2.0
    if dim3:
        bmin -= (rgbrange - brange) / 2.0
        bmax += (rgbrange - brange) / 2.0

if len(sys.argv) > 2:
    fp = open(sys.argv[2], 'wt')
else:
    fp = sys.stdout

lines = []
lines.append('3\n')
for lbl, r, g, b in colors:
    r2, g2, b2 = recolor(r, g, b)
    lines.append('%s\n%g\n%g\n%g\n' % (lbl, r2, g2, b2))
for line in lines:
    fp.write(line)

